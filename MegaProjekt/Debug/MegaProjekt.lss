
MegaProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004275  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000035ae  00000000  00000000  000046ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007bc  00000000  00000000  00007c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00008418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002a7f  00000000  00000000  000084d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f9  00000000  00000000  0000af4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000b048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59
 20c:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
 210:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <c1201_init>:
//#include "hc595.h"
//#include "board.h"
#include "spi.h"

void c1201_init() {
	spi_init();
 218:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <spi_init>
 21c:	08 95       	ret

0000021e <c1201_transmit>:
}

void c1201_transmit(uint8_t dis1, uint8_t dis2) {
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	d8 2f       	mov	r29, r24
 224:	c6 2f       	mov	r28, r22
	spi_select_slave();
 226:	0e 94 69 01 	call	0x2d2	; 0x2d2 <spi_select_slave>
	spi_transfer(dis1);
 22a:	8d 2f       	mov	r24, r29
 22c:	0e 94 6f 01 	call	0x2de	; 0x2de <spi_transfer>
	spi_transfer(dis2);
 230:	8c 2f       	mov	r24, r28
 232:	0e 94 6f 01 	call	0x2de	; 0x2de <spi_transfer>
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <main>:
#include "spi.h"


int main(void)
{
	BUTTON_LOW_PORT.PIN0CTRL = PORT_OPC_PULLUP_gc;
 23c:	e0 e6       	ldi	r30, 0x60	; 96
 23e:	f6 e0       	ldi	r31, 0x06	; 6
 240:	88 e1       	ldi	r24, 0x18	; 24
 242:	80 8b       	std	Z+16, r24	; 0x10
	BUTTON_LOW_PORT.PIN1CTRL = PORT_OPC_PULLUP_gc;
 244:	81 8b       	std	Z+17, r24	; 0x11
	BUTTON_LOW_PORT.PIN2CTRL = PORT_OPC_PULLUP_gc;
 246:	82 8b       	std	Z+18, r24	; 0x12
	BUTTON_LOW_PORT.PIN3CTRL = PORT_OPC_PULLUP_gc;
 248:	83 8b       	std	Z+19, r24	; 0x13
	
	c1201_init();
 24a:	0e 94 0c 01 	call	0x218	; 0x218 <c1201_init>
    while (1)
    {
		c1201_transmit(0x03, 0x03);
		_delay_ms(100);
		if (!(BUTTON_LOW_PORT.IN & BUTTON0_PIN_bm)) {
 24e:	c0 e6       	ldi	r28, 0x60	; 96
 250:	d6 e0       	ldi	r29, 0x06	; 6
			TCE0.CCA = TCE0.PER;     // Duty cycle 100%: LED not dimmed
 252:	00 e0       	ldi	r16, 0x00	; 0
 254:	1a e0       	ldi	r17, 0x0A	; 10
	BUTTON_LOW_PORT.PIN3CTRL = PORT_OPC_PULLUP_gc;
	
	c1201_init();
    while (1)
    {
		c1201_transmit(0x03, 0x03);
 256:	63 e0       	ldi	r22, 0x03	; 3
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 0f 01 	call	0x21e	; 0x21e <c1201_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	8f e4       	ldi	r24, 0x4F	; 79
 260:	93 ec       	ldi	r25, 0xC3	; 195
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <main+0x26>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x2c>
 268:	00 00       	nop
		_delay_ms(100);
		if (!(BUTTON_LOW_PORT.IN & BUTTON0_PIN_bm)) {
 26a:	88 85       	ldd	r24, Y+8	; 0x08
 26c:	80 fd       	sbrc	r24, 0
 26e:	05 c0       	rjmp	.+10     	; 0x27a <main+0x3e>
			TCE0.CCA = TCE0.PER;     // Duty cycle 100%: LED not dimmed
 270:	f8 01       	movw	r30, r16
 272:	86 a1       	ldd	r24, Z+38	; 0x26
 274:	97 a1       	ldd	r25, Z+39	; 0x27
 276:	80 a7       	std	Z+40, r24	; 0x28
 278:	91 a7       	std	Z+41, r25	; 0x29
		}
		if (!(BUTTON_LOW_PORT.IN & BUTTON1_PIN_bm)) {
 27a:	88 85       	ldd	r24, Y+8	; 0x08
 27c:	81 fd       	sbrc	r24, 1
 27e:	07 c0       	rjmp	.+14     	; 0x28e <main+0x52>
			TCE0.CCA = TCE0.PER/2;   // Duty cycle 50%: LED dimmed to 50%
 280:	f8 01       	movw	r30, r16
 282:	86 a1       	ldd	r24, Z+38	; 0x26
 284:	97 a1       	ldd	r25, Z+39	; 0x27
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	80 a7       	std	Z+40, r24	; 0x28
 28c:	91 a7       	std	Z+41, r25	; 0x29
		}
		if (!(BUTTON_LOW_PORT.IN & BUTTON2_PIN_bm)) {
 28e:	88 85       	ldd	r24, Y+8	; 0x08
 290:	82 fd       	sbrc	r24, 2
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <main+0x6a>
			TCE0.CCA = TCE0.PER/4;   // Duty cycle 25%: LED dimmed to 25%
 294:	f8 01       	movw	r30, r16
 296:	86 a1       	ldd	r24, Z+38	; 0x26
 298:	97 a1       	ldd	r25, Z+39	; 0x27
 29a:	96 95       	lsr	r25
 29c:	87 95       	ror	r24
 29e:	96 95       	lsr	r25
 2a0:	87 95       	ror	r24
 2a2:	80 a7       	std	Z+40, r24	; 0x28
 2a4:	91 a7       	std	Z+41, r25	; 0x29
		}
		if (!(BUTTON_LOW_PORT.IN & BUTTON3_PIN_bm)) {
 2a6:	88 85       	ldd	r24, Y+8	; 0x08
 2a8:	83 fd       	sbrc	r24, 3
 2aa:	d5 cf       	rjmp	.-86     	; 0x256 <main+0x1a>
			TCE0.CCA = 0x0000;       // Duty cycle 0%: LED switched off
 2ac:	f8 01       	movw	r30, r16
 2ae:	10 a6       	std	Z+40, r1	; 0x28
 2b0:	11 a6       	std	Z+41, r1	; 0x29
 2b2:	d1 cf       	rjmp	.-94     	; 0x256 <main+0x1a>

000002b4 <spi_init>:
void spi_select_slave(void) {
	SPI_PORT.OUT &= ~SPI_SS_bm;
}

void spi_deselect_slave(void) {
	SPI_PORT.OUT |= SPI_SS_bm;
 2b4:	e0 e4       	ldi	r30, 0x40	; 64
 2b6:	f6 e0       	ldi	r31, 0x06	; 6
 2b8:	84 81       	ldd	r24, Z+4	; 0x04
 2ba:	80 61       	ori	r24, 0x10	; 16
 2bc:	84 83       	std	Z+4, r24	; 0x04
 2be:	80 81       	ld	r24, Z
 2c0:	8f 7b       	andi	r24, 0xBF	; 191
 2c2:	80 83       	st	Z, r24
 2c4:	80 81       	ld	r24, Z
 2c6:	80 6b       	ori	r24, 0xB0	; 176
 2c8:	80 83       	st	Z, r24
 2ca:	82 e5       	ldi	r24, 0x52	; 82
 2cc:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
 2d0:	08 95       	ret

000002d2 <spi_select_slave>:
 2d2:	e0 e4       	ldi	r30, 0x40	; 64
 2d4:	f6 e0       	ldi	r31, 0x06	; 6
 2d6:	84 81       	ldd	r24, Z+4	; 0x04
 2d8:	8f 7e       	andi	r24, 0xEF	; 239
 2da:	84 83       	std	Z+4, r24	; 0x04
 2dc:	08 95       	ret

000002de <spi_transfer>:
}

uint8_t spi_transfer(uint8_t sendbyte) {
 2de:	98 2f       	mov	r25, r24
	// Receive the data.
	uint8_t receivebyte = SPI_MODULE.DATA;
 2e0:	e0 ec       	ldi	r30, 0xC0	; 192
 2e2:	f8 e0       	ldi	r31, 0x08	; 8
 2e4:	83 81       	ldd	r24, Z+3	; 0x03
	// Send the data.
	SPI_MODULE.DATA = sendbyte;
 2e6:	93 83       	std	Z+3, r25	; 0x03
	// While transmission has not yet finished do nothing.
	while (!(SPI_MODULE.STATUS & SPI_IF_bm));
 2e8:	92 81       	ldd	r25, Z+2	; 0x02
 2ea:	99 23       	and	r25, r25
 2ec:	ec f7       	brge	.-6      	; 0x2e8 <spi_transfer+0xa>
	return receivebyte;
 2ee:	08 95       	ret

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
